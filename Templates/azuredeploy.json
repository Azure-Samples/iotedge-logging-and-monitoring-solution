{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Specifies the deployment location."
        }
      },
      "environmentHashId": {
        "type": "string",
        "metadata": {
          "description": "Unique alphanumeric id to assign to multiple resource names."
        }
      },
      "createIoTHub": {
        "type": "bool",
        "defaultValue": true,
        "metadata": {
          "description": "Whether to create a new IoT hub."
        }
      },
      "iotHubLocation": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "IoT Hub location."
        }
      },
      "iotHubName": {
        "type": "string",
        "metadata": {
          "description": "Name for IoT Hub resource."
        }
      },
      "iotHubResourceGroup": {
        "type": "string",
        "metadata": {
          "description": "IoT Hub resource group."
        }
      },
      "iotHubServicePolicyName": {
        "type": "string",
        "metadata": {
          "description": "IoT hub policy policy name."
        }
      },
      "iotHubSku": {
        "type": "string",
        "defaultValue": "S1",
        "allowedValues": [
          "F1",
          "S1",
          "S2",
          "S3"
        ],
        "metadata": {
          "description": "The Azure IoT Hub SKU to use."
        }
      },
      "iotHubCapacity": {
        "type": "int",
        "defaultValue": 1,
        "metadata": {
          "description": "The Azure IoT Hub SKU capacity to use."
        }
      },
      "iotHubTier": {
        "type": "string",
        "defaultValue": "Standard",
        "allowedValues": [
          "Free",
          "Standard"
        ],
        "metadata": {
          "description": "The Azure IoT Hub tier to use."
        }
      },
      "iotHubPartitionCount": {
        "type": "int",
        "defaultValue": 4,
        "metadata": {
          "description": "The Azure IoT Hub default endpoint partition count."
        }
      },
      "iotHubRetentionInDays": {
        "type": "int",
        "defaultValue": 2,
        "metadata": {
          "description": "The Azure IoT Hub default message retention in days."
        }
      },
      "vnetName": {
        "type": "string",
        "defaultValue": "[concat('iot-vnet-', parameters('environmentHashId'))]",
        "metadata": {
          "description": "Name for the virtual network."
        }
      },
      "vnetAddressPrefix": {
        "type": "string",
        "defaultValue": "10.0.0.0/16",
        "metadata": {
          "description": "Address prefix for the virtual network."
        }
      },
      "edgeSubnetName": {
        "type": "string",
        "defaultValue": "iotedge",
        "metadata": {
          "description": "Name for the IoT edge VM subnet."
        }
      },
      "edgeSubnetAddressRange": {
        "type": "string",
        "defaultValue": "10.0.0.0/24",
        "metadata": {
          "description": "Address range for the IoT edge VM subnet."
        }
      },
      "edgeVmName": {
        "type": "string",
        "defaultValue": "[concat('iotedgevm-', parameters('environmentHashId'))]",
        "metadata": {
          "description": "IoT edge virtual machine name."
        }
      },
      "edgeVmSize": {
        "type": "string",
        "defaultValue": "Standard_D2s_v3",
        "metadata": {
          "description": "IoT edge virtual machine size."
        }
      },
      "adminUsername": {
        "type": "string",
        "defaultValue": "azureuser",
        "metadata": {
          "description": "Specifies a username for the Virtual Machine."
        }
      },
      "adminPassword": {
        "type": "secureString",
        "defaultValue": "",
        "metadata": {
          "description": "Specifies the username password for the Virtual Machine."
        }
      },
      "dpsSku": {
        "type": "string",
        "defaultValue": "S1",
        "allowedValues": [
          "S1"
        ],
        "metadata": {
          "description": "The Azure Device Provisioning service SKU to use."
        }
      },
      "dpsCapacity": {
        "type": "int",
        "defaultValue": 1,
        "minValue": 1,
        "maxValue": 3,
        "metadata": {
          "description": "The Azure Device Provisioning service capacity."
        }
      },
      "dpsLocation": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location of Azure IoT Hub for Device Provisioning service."
        }
      },
      "createStorageAccount": {
        "type": "bool",
        "defaultValue": true,
        "metadata": {
          "description": "Whether to create new storage account to store logs."
        }
      },
      "storageAccountLocation": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Storage account location."
        }
      },
      "storageAccountName": {
        "type": "string",
        "metadata": {
          "description": "Logs storage account name."
        }
      },
      "storageAccountResourceGroup": {
        "type": "string",
        "metadata": {
          "description": "Logs storage account resource group."
        }
      },
      "storageContainerName": {
        "type": "string",
        "metadata": {
          "description": "Logs storage container name."
        }
      },
      "storageQueueName": {
        "type": "string",
        "metadata": {
          "description": "Logs storage queue name."
        }
      },
      "storageAccountSku": {
        "type": "string",
        "defaultValue": "Standard_LRS",
        "allowedValues": [
          "Standard_LRS",
          "Standard_GRS",
          "Standard_RAGRS",
          "Standard_ZRS",
          "Premium_LRS"
        ],
        "metadata": {
          "description": "Logs storage account SKU."
        }
      },
      "createEventGridSystemTopic": {
        "type": "bool",
        "defaultValue": true,
        "metadata": {
          "description": "Whether to create new system event grid topic for the logs storage account."
        }
      },
      "eventGridSystemTopicName": {
        "type": "string",
        "metadata": {
          "description": "Event grid system topic name for the logs storage account."
        }
      },
      "deviceQuery": {
        "type": "string",
        "defaultValue": "SELECT * FROM devices",
        "metadata": {
          "description": "IoT hub device query to target specific IoT edge devices."
        }
      },
      "createWorkspace": {
        "type": "bool",
        "defaultValue": true,
        "metadata": {
          "description": "Whether to create a new Log Analytics workspace."
        }
      },
      "workspaceLocation": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Log analytics workspace location."
        }
      },
      "workspaceName": {
        "type": "string",
        "metadata": {
          "description": "Log analytics Workspace name."
        }
      },
      "workspaceResourceGroup": {
        "type": "string",
        "metadata": {
          "description": "Log analytics Workspace resource group."
        }
      },
      "workspaceSku": {
        "type": "string",
        "defaultValue": "PerGB2018",
        "allowedValues": [
          "Free",
          "Standard",
          "Premium",
          "PerNode",
          "PerGB2018",
          "Standalone",
          "CapacityReservation"
        ],
        "metadata": {
          "description": "Log analytics Workspace name."
        }
      },
      "createEventHubsNamespace": {
        "type": "bool",
        "defaultValue": true,
        "metadata": {
          "description": "Whether to create event hubs namespace to capture monitoring metrics."
        }
      },
      "createEventHubs": {
        "type": "bool",
        "defaultValue": true,
        "metadata": {
          "description": "Whether to create event hubs to capture monitoring metrics."
        }
      },
      "eventHubResourceGroup": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "Event hubs namespace resource group."
        }
      },
      "eventHubsLocation": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "Event hubs namespace location."
        }
      },
      "eventHubsNamespace": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "Event hubs namespace name."
        }
      },
      "eventHubsName": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "Event hubs name."
        }
      },
      "eventHubsListenPolicyName": {
        "type": "string",
        "defaultValue": "listen",
        "metadata": {
          "description": "Event hubs authorization rule name for 'listen' rights."
        }
      },
      "eventHubsSendPolicyName": {
        "type": "string",
        "defaultValue": "send",
        "metadata": {
          "description": "Event hubs authorization rule name for 'send' rights."
        }
      },
      "eventHubsEndpointName": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "IoT hub custom endpoint name to event hubs."
        }
      },
      "eventHubsRouteName": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "IoT hub event hubs route name."
        }
      },
      "eventHubsRouteCondition": {
        "type": "string",
        "defaultValue": "",
        "metadata": {
          "description": "Condition to route IoT hub event messages to event hubs route."
        }
      },
      "eventHubsSku": {
        "type": "string",
        "defaultValue": "Standard",
        "allowedValues": [
          "Standard",
          "Basic"
        ],
        "metadata": {
          "description": "Event hubs tier plan."
        }
      },
      "eventHubsSkuCapacity": {
        "type": "int",
        "defaultValue": 1,
        "minValue": 0,
        "maxValue": 20,
        "metadata": {
          "description": "Monitoring metrics event hubs throughput units."
        }
      },
      "eventHubsAutoInflate": {
        "type": "bool",
        "defaultValue": false,
        "metadata": {
          "description": "Value that indicates whether AutoInflate is enabled for eventhub namespace."
        }
      },
      "eventHubsMaxThroughput": {
        "type": "int",
        "defaultValue": 0,
        "minValue": 0,
        "maxValue": 20,
        "metadata": {
          "description": "Upper limit of throughput units when AutoInflate is enabled."
        }
      },
      "eventHubsRetentionInDays": {
        "type": "int",
        "defaultValue": 1,
        "minValue": 1,
        "maxValue": 7,
        "metadata": {
          "description": "Number of days to retain the events for this Event Hub."
        }
      },
      "eventHubsPartitionCount": {
        "type": "int",
        "defaultValue": 4,
        "minValue": 1,
        "maxValue": 32,
        "metadata": {
          "description": "Number of partitions created for the Event Hub."
        }
      },
      "functionAppName": {
        "type": "string",
        "defaultValue": "test",
        "metadata": {
          "description": "Name for the Function App resource."
        }
      },
      "httpTriggerFunction": {
        "type": "string",
        "defaultValue": "InvokeUploadModuleLogs",
        "metadata": {
          "description": "Name of the Http trigger function to schedule module logs upload."
        }
      },
      "moduleIdRegex": {
        "type": "string",
        "defaultValue": ".*",
        "metadata": {
          "description": "Regular expression that supplies the IoT edge module name. It can match multiple modules. .NET Regular Expressions format is expected."
        }
      },
      "logsRegex": {
        "type": "string",
        "defaultValue": "\\b(WRN?|ERR?|CRIT?)\\b",
        "metadata": {
          "description": "Regular expression used to filter log lines with content that matches the specified regular expression. .NET Regular Expressions format is expected."
        }
      },
      "logsType": {
        "type": "string",
        "defaultValue": "iotedgemodulelogs",
        "metadata": {
          "description": "A name to group logs by in Log analytics."
        }
      },
      "logsSince": {
        "type": "string",
        "defaultValue": "1h",
        "metadata": {
          "description": "Only retrieve logs since this time, as a duration (1d, 90m, 2 days 3 hours 2 minutes), rfc3339 timestamp, or UNIX timestamp."
        }
      },
      "logsEncoding": {
        "type": "string",
        "defaultValue": "gzip",
        "allowedValues": [
          "none",
          "gzip"
        ],
        "metadata": {
          "description": "Logs encoding format."
        }
      },
      "metricsEncoding": {
        "type": "string",
        "defaultValue": "gzip",
        "allowedValues": [
          "none",
          "gzip"
        ],
        "metadata": {
          "description": "Metrics encoding format."
        }
      },
      "templateUrl": {
        "type": "string",
        "metadata": {
          "description": "GitHub repo URL."
        }
      },
      "branchName": {
        "type": "string",
        "defaultValue": "master",
        "metadata": {
          "description": "GitHub repo branch name."
        }
      }
    },
  "variables": {
    "dpsName": "[concat('dps-', parameters('environmentHashId'))]",
    "iotHubOwnerPolicyName": "iothubowner",
    "edgeVmDnsName": "[concat(parameters('edgeVmName'), '-', parameters('environmentHashId'))]",
    "eventGridSubscriptionName": "[concat('iotedgemodulelogs', parameters('environmentHashId'))]",
    "eventGridSubscriptionFilter": "[concat('/blobServices/default/containers/', parameters('storageContainerName'), '/')]",
    "functionAppHostingPlanName": "[concat(parameters('functionAppName'), '-plan')]",
    "functionStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'function')]",
    "functionStorageAccountSku": "Standard_LRS",
    "storageAccountEndpointSuffix": "[if(startsWith(resourceGroup().location, 'usgov'), 'core.usgovcloudapi.net', if(startsWith(resourceGroup().location, 'usdod'), 'core.usgovcloudapi.net', 'core.windows.net'))]",
    "functionFileShareName": "[substring(replace(concat(toLower(parameters('functionAppName')), parameters('environmentHashId')), '-', ''), 0, 25)]",
    "functionAppResourceId": "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]",
    "functionApiVersion": "2018-11-01",
    "appInsightsName": "[parameters('functionAppName')]",
    "workspaceId": "[resourceId(parameters('workspaceResourceGroup'), 'Microsoft.OperationalInsights/workspaces', parameters('workspaceName'))]",
    "workspaceApiVersion": "[providers('microsoft.operationalinsights', 'workspaces').apiVersions[0]]",
    "workspaceDomainSuffix": "[if(or(startsWith(resourceGroup().location, 'usgov'), startsWith(resourceGroup().location, 'usdod')), 'azure.us', if(contains(resourceGroup().location, 'china'), 'azure.cn', 'azure.com'))]",
    "iotHubDeploymentNames": {
      "true": "[concat('iothub-with-route-', parameters('environmentHashId'))]",
      "false": "[concat('iothub-', parameters('environmentHashId'))]"
    },
    "iotHubDeploymentName": "[variables('iotHubDeploymentNames')[string(parameters('createEventHubs'))]]",
    "iotHubDeploymentTemplates": {
      "true": "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/Templates/iothub-with-route-deploy.json')]",
      "false": "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/Templates/iothub-deploy.json')]"
    },
    "eventGridDeploymentName": "[concat('storagesystemtopic-', parameters('environmentHashId'))]",
    "eventHubsDeploymentName": "[concat('eventhubs-', parameters('environmentHashId'))]",
    "iotHubRoleAssignmentDeploymentName": "[concat('iothub-roleassignments-', parameters('environmentHashId'))]",
    "eventHubRoleAssignmentDeploymentName": "[concat('eventhub-roleassignments-', parameters('environmentHashId'))]",
    "storageQueueRoleAssignmentDeploymentName": "[concat('queue-roleassignments-', parameters('environmentHashId'))]",
    "storageBlobRoleAssignmentDeploymentName": "[concat('blob-roleassignments-', parameters('environmentHashId'))]",
    "eventHubsConsumerGroup": "$default",
    "linkedDeploymentApiVersion": "2020-10-01",
    "managedIdentityName": "monitoringIdentity",
    "ioTHubDataContributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4fc6c259-987e-4a07-842e-c321cc9d413f')]",
    "eventHubsDataReceiver": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'a638d3c7-ab3a-418d-83e6-5f17a39d4fde')]",
    "storageBlobDataContributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
    "storageQueueDataContributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]"
  },
    "resources": [
      {
        "type": "Microsoft.Resources/deployments",
        "condition": "[parameters('createEventHubs')]",
        "apiVersion": "[variables('linkedDeploymentApiVersion')]",
        "name": "[variables('eventHubsDeploymentName')]",
        "resourceGroup": "[parameters('eventHubResourceGroup')]",
        "dependsOn": [],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "contentVersion": "1.0.0.0",
            "uri": "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/Templates/eventhubs-deploy.json')]"
          },
          "parameters": {
            "createNamespace": {
              "value": "[parameters('createEventHubsNamespace')]"
            },
            "location": {
              "value": "[parameters('eventHubsLocation')]"
            },
            "namespaceName": {
              "value": "[parameters('eventHubsNamespace')]"
            },
            "eventHubsName": {
              "value": "[parameters('eventHubsName')]"
            },
            "sku": {
              "value": "[parameters('eventHubsSku')]"
            },
            "skuCapacity": {
              "value": "[parameters('eventHubsSkuCapacity')]"
            },
            "autoInflate": {
              "value": "[parameters('eventHubsAutoInflate')]"
            },
            "maxThroughput": {
              "value": "[parameters('eventHubsMaxThroughput')]"
            },
            "retentionInDays": {
              "value": "[parameters('eventHubsRetentionInDays')]"
            },
            "partitionCount": {
              "value": "[parameters('eventHubsPartitionCount')]"
            },
            "listenPolicyName": {
              "value": "[parameters('eventHubsListenPolicyName')]"
            },
            "sendPolicyName": {
              "value": "[parameters('eventHubsSendPolicyName')]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "condition": "[parameters('createEventHubs')]",
        "apiVersion": "[variables('linkedDeploymentApiVersion')]",
        "name": "[variables('iotHubDeploymentNames')['true']]",
        "resourceGroup": "[parameters('iotHubResourceGroup')]",
        "dependsOn": [
          "[variables('eventHubsDeploymentName')]"
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "contentVersion": "1.0.0.0",
            "uri": "[variables('iotHubDeploymentTemplates')[string(parameters('createEventHubs'))]]"
          },
          "parameters": {
            "createIoTHub": {
              "value": "[parameters('createIoTHub')]"
            },
            "iotHubLocation": {
              "value": "[parameters('iotHubLocation')]"
            },
            "iotHubName": {
              "value": "[parameters('iotHubName')]"
            },
            "iotHubSku": {
              "value": "[parameters('iotHubSku')]"
            },
            "iotHubTier": {
              "value": "[parameters('iotHubTier')]"
            },
            "iotHubCapacity": {
              "value": "[parameters('iotHubCapacity')]"
            },
            "iotHubRetentionInDays": {
              "value": "[parameters('iotHubRetentionInDays')]"
            },
            "iotHubPartitionCount": {
              "value": "[parameters('iotHubPartitionCount')]"
            },
            "iotHubOwnerPolicyName": {
              "value": "[variables('iotHubOwnerPolicyName')]"
            },
            "iotHubServicePolicyName": {
              "value": "[parameters('iotHubServicePolicyName')]"
            },
            "eventHubsResourceGroup": {
              "value": "[parameters('eventHubResourceGroup')]"
            },
            "eventHubsConnectionString": {
              "value": "[if(parameters('createEventHubs'), concat('Endpoint=sb://', reference(variables('eventHubsDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.endpoint.value, ';EntityPath=', parameters('eventHubsName'), ';SharedAccessKeyName=', parameters('eventHubsSendPolicyName'), ';SharedAccessKey=', reference(variables('eventHubsDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.instanceSendKey.value), '')]"
            },
            "eventHubsEndpointName": {
              "value": "[parameters('eventHubsEndpointName')]"
            },
            "eventHubsRouteName": {
              "value": "[parameters('eventHubsRouteName')]"
            },
            "eventHubsRouteCondition": {
              "value": "[parameters('eventHubsRouteCondition')]"
            },
            "dpsName": {
              "value": "[variables('dpsName')]"
            },
            "dpsSku": {
              "value": "[parameters('dpsSku')]"
            },
            "dpsCapacity": {
              "value": "[parameters('dpsCapacity')]"
            },
            "dpsLocation": {
              "value": "[parameters('dpsLocation')]"
            },
            "edgeVmName": {
              "value": "[parameters('edgeVmName')]"
            },
            "edgeVmDnsName": {
              "value": "[variables('edgeVmDnsName')]"
            },
            "edgeVmSize": {
              "value": "[parameters('edgeVmSize')]"
            },
            "adminUsername": {
              "value": "[parameters('adminUsername')]"
            },
            "adminPassword": {
              "value": "[parameters('adminPassword')]"
            },
            "vnetName": {
              "value": "[parameters('vnetName')]"
            },
            "vnetAddressPrefix": {
              "value": "[parameters('vnetAddressPrefix')]"
            },
            "edgeSubnetName": {
              "value": "[parameters('edgeSubnetName')]"
            },
            "edgeSubnetAddressRange": {
              "value": "[parameters('edgeSubnetAddressRange')]"
            },
            "templateUrl": {
              "value": "[parameters('templateUrl')]"
            },
            "branchName": {
              "value": "[parameters('branchName')]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "condition": "[not(parameters('createEventHubs'))]",
        "apiVersion": "[variables('linkedDeploymentApiVersion')]",
        "name": "[variables('iotHubDeploymentNames')['false']]",
        "resourceGroup": "[parameters('iotHubResourceGroup')]",
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "contentVersion": "1.0.0.0",
            "uri": "[variables('iotHubDeploymentTemplates')[string(parameters('createEventHubs'))]]"
          },
          "parameters": {
            "createIoTHub": {
              "value": "[parameters('createIoTHub')]"
            },
            "iotHubLocation": {
              "value": "[parameters('iotHubLocation')]"
            },
            "iotHubName": {
              "value": "[parameters('iotHubName')]"
            },
            "iotHubSku": {
              "value": "[parameters('iotHubSku')]"
            },
            "iotHubTier": {
              "value": "[parameters('iotHubTier')]"
            },
            "iotHubCapacity": {
              "value": "[parameters('iotHubCapacity')]"
            },
            "iotHubRetentionInDays": {
              "value": "[parameters('iotHubRetentionInDays')]"
            },
            "iotHubPartitionCount": {
              "value": "[parameters('iotHubPartitionCount')]"
            },            
            "iotHubOwnerPolicyName": {
              "value": "[variables('iotHubOwnerPolicyName')]"
            },
            "iotHubServicePolicyName": {
              "value": "[parameters('iotHubServicePolicyName')]"
            },
            "dpsName": {
              "value": "[variables('dpsName')]"
            },
            "dpsSku": {
              "value": "[parameters('dpsSku')]"
            },
            "dpsCapacity": {
              "value": "[parameters('dpsCapacity')]"
            },
            "dpsLocation": {
              "value": "[parameters('dpsLocation')]"
            },
            "edgeVmName": {
              "value": "[parameters('edgeVmName')]"
            },
            "edgeVmDnsName": {
              "value": "[variables('edgeVmDnsName')]"
            },
            "edgeVmSize": {
              "value": "[parameters('edgeVmSize')]"
            },
            "adminUsername": {
              "value": "[parameters('adminUsername')]"
            },
            "adminPassword": {
              "value": "[parameters('adminPassword')]"
            },
            "vnetName": {
              "value": "[parameters('vnetName')]"
            },
            "vnetAddressPrefix": {
              "value": "[parameters('vnetAddressPrefix')]"
            },
            "edgeSubnetName": {
              "value": "[parameters('edgeSubnetName')]"
            },
            "edgeSubnetAddressRange": {
              "value": "[parameters('edgeSubnetAddressRange')]"
            },
            "templateUrl": {
              "value": "[parameters('templateUrl')]"
            },
            "branchName": {
              "value": "[parameters('branchName')]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "[variables('linkedDeploymentApiVersion')]",
        "name": "[variables('eventGridDeploymentName')]",
        "resourceGroup": "[parameters('storageAccountResourceGroup')]",
        "dependsOn": [],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "contentVersion": "1.0.0.0",
            "uri": "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/Templates/storage-deploy.json')]"
          },
          "parameters": {
            "createStorageAccount": {
              "value": "[parameters('createStorageAccount')]"
            },
            "storageAccountLocation": {
              "value": "[parameters('storageAccountLocation')]"
            },
            "storageAccountName": {
              "value": "[parameters('storageAccountName')]"
            },
            "storageAccountSku": {
              "value": "[parameters('storageAccountSku')]"
            },
            "storageContainerName": {
              "value": "[parameters('storageContainerName')]"
            },
            "storageQueueName": {
              "value": "[parameters('storageQueueName')]"
            },
            "createEventGridSystemTopic": {
              "value": "[parameters('createEventGridSystemTopic')]"
            },
            "eventGridSystemTopicName": {
              "value": "[parameters('eventGridSystemTopicName')]"
            },
            "eventGridSubscriptionName": {
              "value": "[variables('eventGridSubscriptionName')]"
            },
            "eventGridSubscriptionFilter": {
              "value": "[variables('eventGridSubscriptionFilter')]"
            }
          }
        }
      },
      {
        "apiVersion": "[variables('linkedDeploymentApiVersion')]",
        "condition": "[parameters('createWorkspace')]",
        "type": "microsoft.operationalinsights/workspaces",
        "name": "[parameters('workspaceName')]",
        "location": "[parameters('workspaceLocation')]",
        "properties": {
          "sku": {
            "name": "[parameters('workspaceSku')]"
          },
          "retentionInDays": 30,
          "workspaceCapping": {
            "dailyQuotaGb": -1
          },
          "publicNetworkAccessForIngestion": "Enabled",
          "publicNetworkAccessForQuery": "Enabled"
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2019-04-01",
        "name": "[variables('functionStorageAccountName')]",
        "location": "[parameters('location')]",
        "kind": "StorageV2",
        "sku": {
          "name": "[variables('functionStorageAccountSku')]"
        }
      },
      {
        "type": "Microsoft.Storage/storageAccounts/fileServices/shares",
        "apiVersion": "2019-06-01",
        "name": "[concat(variables('functionStorageAccountName'), '/default/', variables('functionFileShareName'))]",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName'))]"
        ]
      },
      {
        "type": "Microsoft.Web/serverfarms",
        "apiVersion": "[variables('functionApiVersion')]",
        "name": "[variables('functionAppHostingPlanName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "Y1",
          "tier": "Dynamic"
        },
        "properties": {
          "name": "[variables('functionAppHostingPlanName')]",
          "computeMode": "Dynamic"
        }
      },
      {
        "type": "microsoft.insights/components",
        "apiVersion": "2020-02-02-preview",
        "name": "[variables('appInsightsName')]",
        "location": "[parameters('location')]",
        "tags": {
          "[concat('hidden-link:', resourceId('Microsoft.Web/sites', variables('appInsightsName')))]": "Resource"
        },
        "properties": {
          "ApplicationId": "[variables('appInsightsName')]",
          "Request_Source": "IbizaWebAppExtensionCreate"
        }
      },
      {
        "type": "Microsoft.Web/sites",
        "apiVersion": "[variables('functionApiVersion')]",
        "name": "[parameters('functionAppName')]",
        "tags": {
          "elms": "true",
          "iotHub": "[resourceId(parameters('iotHubResourceGroup'), 'Microsoft.Devices/IotHubs', parameters('iotHubName'))]",
          "storageAccount": "[resourceId(parameters('storageAccountResourceGroup'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]",
          "logAnalyticsWorkspace": "[variables('workspaceId')]",
          "eventHubsInstance": "[if(parameters('createEventHubs'), resourceId(parameters('eventHubResourceGroup'), 'Microsoft.EventHub/namespaces/eventhubs', parameters('eventHubsNamespace'), parameters('eventHubsName')), '')]"
        },
        "location": "[parameters('location')]",
        "kind": "functionapp",
        "identity": {
          "type": "SystemAssigned"
        },            
        "dependsOn": [
          "[resourceId('microsoft.operationalinsights/workspaces', parameters('workspaceName'))]",
          "[resourceId('Microsoft.Web/serverfarms', variables('functionAppHostingPlanName'))]",
          "[resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName'))]",
          "[resourceId('microsoft.insights/components', variables('appInsightsName'))]",
          "[variables('iotHubDeploymentName')]",
          "[variables('eventGridDeploymentName')]",
          "[variables('eventHubsDeploymentName')]"
        ],
        "properties": {
          "name": "[parameters('functionAppName')]",
          "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('functionAppHostingPlanName'))]",
          "clientAffinityEnabled": false,
          "siteConfig": {
            "cors": {
              "allowedOrigins": [
                "*"
              ]
            },
            "appSettings": [
              {
                "name": "AzureWebJobsStorage",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('functionStorageAccountName'), ';AccountKey=', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName')), '2018-11-01').keys[0].value, ';EndpointSuffix=', variables('storageAccountEndpointSuffix'))]"
              },
              {
                "name": "AzureWebJobsDashboard",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('functionStorageAccountName'), ';AccountKey=', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName')), '2018-11-01').keys[0].value, ';EndpointSuffix=', variables('storageAccountEndpointSuffix'))]"
              },
              {
                "name": "WEBSITE_CONTENTSHARE",
                "value": "[variables('functionFileShareName')]"
              },
              {
                "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('functionStorageAccountName'), ';AccountKey=', listkeys(resourceId('Microsoft.Storage/storageAccounts', variables('functionStorageAccountName')), '2018-11-01').keys[0].value, ';EndpointSuffix=', variables('storageAccountEndpointSuffix'))]"
              },
              {
                "name": "FUNCTIONS_EXTENSION_VERSION",
                "value": "~3"
              },
              {
                "name": "FUNCTIONS_WORKER_RUNTIME",
                "value": "dotnet"
              },
              {
                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02-preview').InstrumentationKey]"
              },
              {
                "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName')), '2020-02-02-preview').connectionString]"
              },
              {
                "name": "StorageAccountName",
                "value": "[parameters('storageAccountName')]"
              },
              {
                "name": "StorageName__serviceUri",
                "value": "[concat('https://', parameters('storageAccountName'), '.queue.core.windows.net/')]"
              },
              {
                "name": "QueueName",
                "value": "[parameters('storageQueueName')]"
              },
              {
                "name": "ContainerName",
                "value": "[parameters('storageContainerName')]"
              },
              {
                "name": "DeviceQuery",
                "value": "[parameters('deviceQuery')]"
              },
              {
                "name": "HubHostName",
                "value": "[reference(variables('iotHubDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.hostname.value]"                
              },
              {
                "name": "HubResourceId",
                "value": "[reference(variables('iotHubDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.resourceId.value]"
              },
              {
                "name": "EventHubName",
                "value": "[parameters('eventHubsName')]"
              },
              {
                "name": "EventHubConsumerGroup",
                "value": "[variables('eventHubsConsumerGroup')]"
              },
              {
                "name": "EventHub__fullyQualifiedNamespace",
                "value": "[if(parameters('createEventHubs'), concat(parameters('eventHubsNamespace'), '.servicebus.windows.net'), '')]"
              },
              {
                "name": "CompressForUpload",
                "value": "true"
              },
              {
                "name": "LogsContentType",
                "value": "json"
              },
              {
                "name": "LogsEncoding",
                "value": "[parameters('logsEncoding')]"
              },
              {
                "name": "MetricsEncoding",
                "value": "[parameters('metricsEncoding')]"
              },
              {
                "name": "LogsMaxSizeMB",
                "value": "28"
              },
              {
                "name": "LogsIdRegex",
                "value": "[parameters('moduleIdRegex')]"
              },
              {
                "name": "LogsRegex",
                "value": "[parameters('logsRegex')]"
              },
              {
                "name": "LogsSince",
                "value": "[parameters('logsSince')]"
              },
              {
                "name": "LogType",
                "value": "[parameters('logsType')]"
              },
              {
                "name": "WorkspaceApiVersion",
                "value": "2016-04-01"
              },
              {
                "name": "WorkspaceId",
                "value": "[reference(variables('workspaceId'), variables('workspaceApiVersion')).customerId]"
              },
              {
                "name": "WorkspaceKey",
                "value": "[listKeys(variables('workspaceId'), variables('workspaceApiVersion')).primarySharedKey]"
              },
              {
                "name": "WorkspaceDomainSuffix",
                "value": "[variables('workspaceDomainSuffix')]"
              },
              {
                "name": "HttpTriggerFunction",
                "value": "[parameters('httpTriggerFunction')]"
              },
              {
                "name": "WEBSITE_LOAD_USER_PROFILE",
                "value": "[if(parameters('createEventHubs'), 1, 0)]" // this is required for proper certificate loading in the CollectMetrics function
              }
            ]
          }
        },
        "resources": []
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "[variables('linkedDeploymentApiVersion')]",
        "name": "[variables('iotHubRoleAssignmentDeploymentName')]",
        "resourceGroup": "[parameters('iotHubResourceGroup')]",
        "dependsOn": [
            "[variables('iotHubDeploymentName')]",
            "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"            
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "contentVersion": "1.0.0.0",
            "uri": "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/Templates/roleassignments-deploy.json')]"
          },
          "parameters": {
            "name": {
              "value": "[guid('iotHubRoleAssignmentName', parameters('iotHubName'))]"
            },
            "scope": {
              "value": "[resourceId(parameters('iotHubResourceGroup'), 'Microsoft.Devices/Iothubs', parameters('iotHubName'))]"
            },
            "roleDefinitionId": {
              "value": "[variables('ioTHubDataContributor')]"
            },
            "principalId": {
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')),'2019-08-01', 'full').identity.principalId]"
            },
            "principalType": {
              "value": "ServicePrincipal"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "[variables('linkedDeploymentApiVersion')]",
        "condition": "[not(empty(parameters('eventHubsNamespace')))]",
        "name": "[variables('eventHubRoleAssignmentDeploymentName')]",
        "resourceGroup": "[parameters('eventHubResourceGroup')]",
        "dependsOn": [
            "[variables('eventHubsDeploymentName')]",
            "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"            
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "contentVersion": "1.0.0.0",
            "uri": "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/Templates/roleassignments-deploy.json')]"
          },
          "parameters": {
            "name": {
              "value": "[guid('eventHubRoleAssignmentName', parameters('iotHubName'))]"
            },
            "scope": {
              "value": "[resourceId(parameters('eventHubResourceGroup'), 'Microsoft.EventHub/namespaces', parameters('eventHubsNamespace'))]"
            },
            "roleDefinitionId": {
              "value": "[variables('eventHubsDataReceiver')]"
            },
            "principalId": {
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')),'2019-08-01', 'full').identity.principalId]"
            },
            "principalType": {
              "value": "ServicePrincipal"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "[variables('linkedDeploymentApiVersion')]",
        "name": "[variables('storageBlobRoleAssignmentDeploymentName')]",
        "resourceGroup": "[parameters('storageAccountResourceGroup')]",
        "dependsOn": [
            "[variables('eventGridDeploymentName')]",
            "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"            
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "contentVersion": "1.0.0.0",
            "uri": "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/Templates/roleassignments-deploy.json')]"
          },
          "parameters": {
            "name": {
              "value": "[guid('storageBlobRoleAssignmentName', parameters('iotHubName'))]"
            },
            "scope": {
              "value": "[resourceId(parameters('storageAccountResourceGroup'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            },
            "roleDefinitionId": {
              "value": "[variables('storageBlobDataContributor')]"
            },
            "principalId": {
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')),'2019-08-01', 'full').identity.principalId]"
            },
            "principalType": {
              "value": "ServicePrincipal"
            }
          }
        }
      },
      {
        "type": "Microsoft.Resources/deployments",
        "apiVersion": "[variables('linkedDeploymentApiVersion')]",
        "name": "[variables('storageQueueRoleAssignmentDeploymentName')]",
        "resourceGroup": "[parameters('storageAccountResourceGroup')]",
        "dependsOn": [
            "[variables('eventGridDeploymentName')]",
            "[resourceId('Microsoft.Web/sites', parameters('functionAppName'))]"            
        ],
        "properties": {
          "mode": "Incremental",
          "templateLink": {
            "contentVersion": "1.0.0.0",
            "uri": "[concat(parameters('templateUrl'), '/', parameters('branchName'), '/Templates/roleassignments-deploy.json')]"
          },
          "parameters": {
            "name": {
              "value": "[guid('storageQueueRoleAssignmentName', parameters('iotHubName'))]"
            },
            "scope": {
              "value": "[resourceId(parameters('storageAccountResourceGroup'), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName'))]"
            },
            "roleDefinitionId": {
              "value": "[variables('storageQueueDataContributor')]"
            },
            "principalId": {
              "value": "[reference(resourceId('Microsoft.Web/sites', parameters('functionAppName')),'2019-08-01', 'full').identity.principalId]"
            },
            "principalType": {
              "value": "ServicePrincipal"
            }
          }
        }
      }                  
    ],
    "outputs": {
      "iotHubResourceId": {
        "type": "string",
        "value": "[reference(variables('iotHubDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.resourceId.value]"
      },
      "workspaceId": {
        "type": "string",
        "value": "[reference(variables('workspaceId'), variables('workspaceApiVersion')).customerId]"
      },
      "workspaceSharedKey": {
        "type": "string",
        "value": "[listKeys(variables('workspaceId'), variables('workspaceApiVersion')).primarySharedKey]"
      },
      "eventHubsNamespaceResourceId": {
        "type": "string",
        "value": "[if(parameters('createEventHubs'), reference(variables('eventHubsDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.namespaceResourceId.value, '')]"
      },
      "eventHubsNamespaceEndpoint": {
        "type": "string",
        "value": "[if(parameters('createEventHubs'), reference(variables('eventHubsDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.endpoint.value, '')]"
      },
      "eventHubsInstanceResourceId": {
        "type": "string",
        "value": "[if(parameters('createEventHubs'), reference(variables('eventHubsDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.instanceResourceId.value, '')]"
      },
      "eventHubsEndpoint": {
        "type": "string",
        "value": "[if(parameters('createEventHubs'), reference(variables('eventHubsDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.endpoint.value, '')]"
      },
      "eventHubsListenKey": {
        "type": "string",
        "value": "[if(parameters('createEventHubs'), reference(variables('eventHubsDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.namespaceListenKey.value, '')]"
      },
      "eventHubsSendKey": {
        "type": "string",
        "value": "[if(parameters('createEventHubs'), reference(variables('eventHubsDeploymentName'), variables('linkedDeploymentApiVersion')).outputs.instanceSendKey.value, '')]"
      }
    }
  }